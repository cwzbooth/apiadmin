{"remainingRequest":"/www/wwwroot/apiadmin.fmoons.com/public/ApiAdmin-WEB/node_modules/vue-loader/lib/index.js??vue-loader-options!/www/wwwroot/apiadmin.fmoons.com/public/ApiAdmin-WEB/src/view/system/auth.vue?vue&type=script&lang=js&","dependencies":[{"path":"/www/wwwroot/apiadmin.fmoons.com/public/ApiAdmin-WEB/src/view/system/auth.vue","mtime":1596016298726},{"path":"/www/wwwroot/apiadmin.fmoons.com/public/ApiAdmin-WEB/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/www/wwwroot/apiadmin.fmoons.com/public/ApiAdmin-WEB/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/www/wwwroot/apiadmin.fmoons.com/public/ApiAdmin-WEB/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/www/wwwroot/apiadmin.fmoons.com/public/ApiAdmin-WEB/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/www/wwwroot/apiadmin.fmoons.com/public/ApiAdmin-WEB/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getUsers } from '@/api/user'\nimport { getList, add, edit, del, delMember, getRuleList, changeStatus, editRule } from '@/api/auth'\n\nconst editButton = (vm, h, currentRow, index) => {\n  if (vm.buttonShow.edit) {\n    return h('Button', {\n      props: {\n        type: 'primary'\n      },\n      style: {\n        margin: '0 5px'\n      },\n      on: {\n        'click': () => {\n          vm.formItem.id = currentRow.id\n          vm.formItem.name = currentRow.name\n          vm.formItem.description = currentRow.description\n          vm.modalSetting.show = true\n          vm.modalSetting.index = index\n        }\n      }\n    }, vm.$t('edit_button'))\n  }\n}\nconst authButton = (vm, h, currentRow, index) => {\n  if (vm.buttonShow.edit) {\n    return h('Button', {\n      props: {\n        type: 'info',\n        ghost: true\n      },\n      style: {\n        margin: '0 5px'\n      },\n      on: {\n        'click': () => {\n          vm.formItem.id = currentRow.id\n          getRuleList({ 'group_id': currentRow.id }).then(response => {\n            vm.ruleList = response.data.data.list\n          })\n          vm.authSetting.show = true\n          vm.authSetting.index = index\n        }\n      }\n    }, '设置权限')\n  }\n}\nconst deleteButton = (vm, h, currentRow, index) => {\n  if (vm.buttonShow.del) {\n    return h('Poptip', {\n      props: {\n        confirm: true,\n        title: '您确定要删除这条数据吗? ',\n        transfer: true\n      },\n      on: {\n        'on-ok': () => {\n          del(currentRow.id).then(response => {\n            vm.tableData.splice(index, 1)\n            vm.$Message.success(response.data.msg)\n          })\n        }\n      }\n    }, [\n      h('Button', {\n        style: {\n          margin: '0 5px'\n        },\n        props: {\n          type: 'error',\n          placement: 'top',\n          loading: currentRow.isDeleting\n        }\n      }, vm.$t('delete_button'))\n    ])\n  }\n}\nconst memberButton = (vm, h, currentRow, index) => {\n  if (vm.buttonShow.memberList) {\n    return h('Button', {\n      props: {\n        type: 'primary'\n      },\n      style: {\n        margin: '0 5px'\n      },\n      on: {\n        'click': () => {\n          vm.memberSetting.show = true\n          vm.memberShow.gid = currentRow.id\n          vm.getMemberList()\n        }\n      }\n    }, '组成员')\n  }\n}\nconst memberDelButton = (vm, h, currentRow, index) => {\n  if (vm.buttonShow.memberDel) {\n    return h('Poptip', {\n      props: {\n        confirm: true,\n        title: '您确定要删除这条数据吗? ',\n        transfer: true\n      },\n      on: {\n        'on-ok': () => {\n          delMember({\n            uid: currentRow.id,\n            gid: vm.memberShow.gid\n          }).then(response => {\n            vm.memberData.splice(index, 1)\n            vm.$Message.success(response.data.msg)\n          })\n        }\n      }\n    }, [\n      h('Button', {\n        style: {\n          margin: '0 5px'\n        },\n        props: {\n          type: 'error',\n          placement: 'top',\n          loading: currentRow.isDeleting\n        }\n      }, vm.$t('delete_button'))\n    ])\n  }\n}\n\nexport default {\n  name: 'system_auth',\n  data () {\n    return {\n      ruleList: [],\n      columnsList: [\n        {\n          title: '序号',\n          type: 'index',\n          width: 65,\n          align: 'center'\n        },\n        {\n          title: '权限组',\n          align: 'center',\n          key: 'name',\n          width: 200\n        },\n        {\n          title: '描述',\n          align: 'center',\n          key: 'description'\n        },\n        {\n          title: '成员授权',\n          align: 'center',\n          width: 116,\n          render: (h, params) => {\n            return h('div', [\n              memberButton(this, h, params.row, params.index)\n            ])\n          }\n        },\n        {\n          title: '状态',\n          align: 'center',\n          width: 100,\n          render: (h, params) => {\n            let vm = this\n            return h('i-switch', {\n              attrs: {\n                size: 'large'\n              },\n              props: {\n                'true-value': 1,\n                'false-value': 0,\n                value: params.row.status,\n                disabled: !vm.buttonShow.changeStatus\n              },\n              on: {\n                'on-change': function (status) {\n                  changeStatus(status, params.row.id).then(response => {\n                    vm.$Message.success(response.data.msg)\n                    vm.getList()\n                  })\n                }\n              }\n            }, [\n              h('span', {\n                slot: 'open'\n              }, vm.$t('open_choose')),\n              h('span', {\n                slot: 'close'\n              }, vm.$t('close_choose'))\n            ])\n          }\n        },\n        {\n          title: '操作',\n          align: 'center',\n          width: 285,\n          render: (h, params) => {\n            return h('div', [\n              authButton(this, h, params.row, params.index),\n              editButton(this, h, params.row, params.index),\n              deleteButton(this, h, params.row, params.index)\n            ])\n          }\n        }\n      ],\n      memberColumns: [\n        {\n          title: '序号',\n          type: 'index',\n          width: 65,\n          align: 'center'\n        },\n        {\n          title: '用户账号',\n          align: 'center',\n          key: 'username'\n        },\n        {\n          title: '用户昵称',\n          align: 'center',\n          key: 'nickname',\n          width: 100\n        },\n        {\n          title: '登录次数',\n          align: 'center',\n          key: 'login_times',\n          width: 100\n        },\n        {\n          title: '最后登录时间',\n          align: 'center',\n          key: 'last_login_time',\n          width: 140\n        },\n        {\n          title: '最后登录IP',\n          align: 'center',\n          key: 'last_login_ip',\n          width: 160\n        },\n        {\n          title: '状态',\n          align: 'center',\n          width: 100,\n          render: (h, params) => {\n            if (params.row.status === 1) {\n              return h('Tag', {\n                props: {\n                  'color': 'green'\n                }\n              }, '启用')\n            } else {\n              return h('Tag', {\n                props: {\n                  'color': 'red'\n                }\n              }, vm.$t('close_choose'))\n            }\n          }\n        },\n        {\n          title: '操作',\n          align: 'center',\n          width: 115,\n          render: (h, params) => {\n            return h('div', [\n              memberDelButton(this, h, params.row, params.index)\n            ])\n          }\n        }\n      ],\n      tableData: [],\n      memberData: [],\n      tableShow: {\n        currentPage: 1,\n        pageSize: 10,\n        listCount: 0\n      },\n      memberShow: {\n        currentPage: 1,\n        pageSize: 10,\n        listCount: 0,\n        gid: 0\n      },\n      searchConf: {\n        keywords: '',\n        status: ''\n      },\n      modalSetting: {\n        show: false,\n        loading: false,\n        index: 0\n      },\n      authSetting: {\n        show: false,\n        loading: false,\n        index: 0\n      },\n      memberSetting: {\n        show: false,\n        loading: false,\n        index: 0\n      },\n      formItem: {\n        name: '',\n        description: '',\n        rules: [],\n        id: 0\n      },\n      ruleValidate: {\n        name: [\n          { required: true, message: '组名称不能为空', trigger: 'blur' }\n        ]\n      },\n      buttonShow: {\n        edit: true,\n        del: true,\n        changeStatus: true,\n        memberDel: true,\n        memberList: true\n      },\n      listLoading: false,\n      memberLoading: false\n    }\n  },\n  created () {\n    let vm = this\n    vm.getList()\n    vm.hasRule('Auth/edit').then(res => {\n      vm.buttonShow.edit = res\n    })\n    vm.hasRule('Auth/del').then(res => {\n      vm.buttonShow.del = res\n    })\n    vm.hasRule('Auth/changeStatus').then(res => {\n      vm.buttonShow.changeStatus = res\n    })\n    vm.hasRule('User/getUsers').then(res => {\n      vm.buttonShow.memberList = res\n    })\n    vm.hasRule('Auth/delMember').then(res => {\n      vm.buttonShow.memberDel = res\n    })\n  },\n  methods: {\n    authEdit () {\n      let vm = this\n      vm.formItem.rules = []\n      let ruleNodes = vm.$refs['formTree'].getCheckedNodes()\n      let ruleLength = ruleNodes.length\n      if (ruleLength) {\n        for (let i = 0; i <= ruleLength - 1; i++) {\n          this.formItem.rules.push(ruleNodes[i]['key'])\n        }\n      }\n\n      vm.authSetting.loading = true\n      editRule(vm.formItem).then(response => {\n        vm.$Message.success(response.data.msg)\n        vm.authSetting.show = false\n        vm.authSetting.loading = false\n      }).catch(() => {\n        vm.authSetting.loading = false\n      })\n    },\n    alertAdd () {\n      this.modalSetting.show = true\n    },\n    submit () {\n      let vm = this\n      this.$refs['myForm'].validate((valid) => {\n        if (valid) {\n          vm.modalSetting.loading = true\n          if (vm.formItem.id === 0) {\n            add(vm.formItem).then(response => {\n              vm.$Message.success(response.data.msg)\n              vm.getList()\n              vm.cancel()\n            }).catch(() => {\n              vm.modalSetting.loading = false\n            })\n          } else {\n            edit(vm.formItem).then(response => {\n              vm.$Message.success(response.data.msg)\n              vm.getList()\n              vm.cancel()\n            }).catch(() => {\n              vm.modalSetting.loading = false\n            })\n          }\n        }\n      })\n    },\n    cancel () {\n      this.modalSetting.show = false\n    },\n    doCancel (data) {\n      if (!data) {\n        this.formItem.id = 0\n        this.$refs['myForm'].resetFields()\n        this.modalSetting.loading = false\n        this.modalSetting.index = 0\n      }\n    },\n    changePage (page) {\n      this.tableShow.currentPage = page\n      this.getList()\n    },\n    changeSize (size) {\n      this.tableShow.pageSize = size\n      this.getList()\n    },\n    changeMemberPage (page) {\n      this.memberShow.currentPage = page\n      this.getMemberList()\n    },\n    changeMemberSize (size) {\n      this.memberShow.pageSize = size\n      this.getMemberList()\n    },\n    search () {\n      this.tableShow.currentPage = 1\n      this.getList()\n    },\n    getList () {\n      let vm = this\n      let params = {\n        page: vm.tableShow.currentPage,\n        size: vm.tableShow.pageSize,\n        keywords: vm.searchConf.keywords,\n        status: vm.searchConf.status\n      }\n      vm.listLoading = true\n      getList(params).then(response => {\n        vm.tableData = response.data.data.list\n        vm.tableShow.listCount = response.data.data.count\n        vm.listLoading = false\n      })\n    },\n    getMemberList () {\n      let vm = this\n      let params = {\n        page: vm.memberShow.currentPage,\n        size: vm.memberShow.pageSize,\n        gid: vm.memberShow.gid\n      }\n      vm.memberLoading = true\n      getUsers(params).then(response => {\n        vm.memberData = response.data.data.list\n        vm.memberShow.listCount = response.data.data.count\n        vm.memberLoading = false\n      })\n    }\n  }\n}\n",null]}
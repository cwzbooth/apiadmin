{"remainingRequest":"/www/wwwroot/apiadmin.fmoons.com/public/ApiAdmin-WEB/node_modules/vue-loader/lib/index.js??vue-loader-options!/www/wwwroot/apiadmin.fmoons.com/public/ApiAdmin-WEB/src/view/interface/list.vue?vue&type=script&lang=js&","dependencies":[{"path":"/www/wwwroot/apiadmin.fmoons.com/public/ApiAdmin-WEB/src/view/interface/list.vue","mtime":1596016298725},{"path":"/www/wwwroot/apiadmin.fmoons.com/public/ApiAdmin-WEB/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/www/wwwroot/apiadmin.fmoons.com/public/ApiAdmin-WEB/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/www/wwwroot/apiadmin.fmoons.com/public/ApiAdmin-WEB/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/www/wwwroot/apiadmin.fmoons.com/public/ApiAdmin-WEB/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getList, changeStatus, add, edit, del, getHash, refresh } from '@/api/interface'\nimport { getAll } from '@/api/interface-group'\n\nconst editButton = (vm, h, currentRow, index) => {\n  if (vm.buttonShow.edit) {\n    return h('Button', {\n      props: {\n        type: 'primary'\n      },\n      style: {\n        margin: '0 5px'\n      },\n      on: {\n        'click': () => {\n          vm.formItem.id = currentRow.id\n          vm.formItem.api_class = currentRow.api_class\n          vm.formItem.info = currentRow.info\n          vm.formItem.method = currentRow.method\n          vm.formItem.hash = currentRow.hash\n          vm.formItem.group_hash = currentRow.group_hash\n          vm.formItem.access_token = currentRow.access_token\n          vm.formItem.is_test = currentRow.is_test\n          vm.formItem.hash_type = currentRow.hash_type\n          vm.modalSetting.show = true\n          vm.modalSetting.index = index\n        }\n      }\n    }, vm.$t('edit_button'))\n  }\n}\nconst deleteButton = (vm, h, currentRow, index) => {\n  if (vm.buttonShow.del) {\n    return h('Poptip', {\n      props: {\n        confirm: true,\n        title: '您确定要删除这条数据吗? ',\n        transfer: true\n      },\n      on: {\n        'on-ok': () => {\n          del(currentRow.hash).then(response => {\n            currentRow.loading = false\n            vm.tableData.splice(index, 1)\n            vm.$Message.success(response.data.msg)\n          })\n        }\n      }\n    }, [\n      h('Button', {\n        style: {\n          margin: '0 5px'\n        },\n        props: {\n          type: 'error',\n          placement: 'top',\n          loading: currentRow.isDeleting\n        }\n      }, vm.$t('delete_button'))\n    ])\n  }\n}\nconst requestButton = (vm, h, currentRow, index) => {\n  if (vm.buttonShow.request) {\n    return h('Button', {\n      style: {\n        margin: '0 5px'\n      },\n      props: {\n        type: 'info',\n        placement: 'top',\n        loading: currentRow.isDeleting\n      },\n      on: {\n        click: () => {\n          let hash = currentRow.hash\n          vm.$router.push({\n            path: `request/${hash}`\n          })\n        }\n      }\n    }, '请求参数')\n  }\n}\nconst responseButton = (vm, h, currentRow, index) => {\n  if (vm.buttonShow.response) {\n    return h('Button', {\n      style: {\n        margin: '0 5px'\n      },\n      props: {\n        type: 'warning',\n        placement: 'top',\n        loading: currentRow.isDeleting\n      },\n      on: {\n        click: () => {\n          let hash = currentRow.hash\n          vm.$router.push({\n            path: `response/${hash}`\n          })\n        }\n      }\n    }, '返回参数')\n  }\n}\n\nexport default {\n  name: 'interface_list',\n  data () {\n    return {\n      confirmRefresh: false,\n      refreshLoading: false,\n      columnsList: [\n        {\n          title: '序号',\n          type: 'index',\n          width: 65,\n          align: 'center'\n        },\n        {\n          title: '接口名称',\n          align: 'center',\n          minWidth: 190,\n          key: 'info'\n        },\n        {\n          title: '真实类库',\n          align: 'center',\n          key: 'api_class',\n          width: 190\n        },\n        {\n          title: '接口映射',\n          align: 'center',\n          key: 'hash',\n          width: 140\n        },\n        {\n          title: '请求方式',\n          align: 'center',\n          width: 95,\n          render: (h, params) => {\n            if (params.row.isTest === 1) {\n              return h('tag', {\n                attrs: {\n                  color: 'error'\n                }\n              }, '测试')\n            } else {\n              switch (params.row.method) {\n                case 1:\n                  return h('Tag', {\n                    attrs: {\n                      color: 'success'\n                    }\n                  }, 'POST')\n                case 2:\n                  return h('Tag', {\n                    attrs: {\n                      color: 'primary'\n                    }\n                  }, 'GET')\n                case 0:\n                  return h('Tag', {\n                    attrs: {\n                      color: 'warning'\n                    }\n                  }, '不限')\n              }\n            }\n          }\n        },\n        {\n          title: '接口状态',\n          align: 'center',\n          width: 130,\n          render: (h, params) => {\n            let vm = this\n            return h('i-switch', {\n              attrs: {\n                size: 'large'\n              },\n              props: {\n                'true-value': 1,\n                'false-value': 0,\n                value: params.row.status,\n                disabled: !vm.buttonShow.changeStatus\n              },\n              on: {\n                'on-change': function (status) {\n                  changeStatus(status, params.row.hash).then(response => {\n                    vm.$Message.success(response.data.msg)\n                    vm.getList()\n                  })\n                }\n              }\n            }, [\n              h('span', {\n                slot: 'open'\n              }, vm.$t('open_choose')),\n              h('span', {\n                slot: 'close'\n              }, vm.$t('close_choose'))\n            ])\n          }\n        },\n        {\n          title: '操作',\n          align: 'center',\n          minWidth: 375,\n          render: (h, params) => {\n            return h('div', [\n              editButton(this, h, params.row, params.index),\n              requestButton(this, h, params.row, params.index),\n              responseButton(this, h, params.row, params.index),\n              deleteButton(this, h, params.row, params.index)\n            ])\n          }\n        }\n      ],\n      tableData: [],\n      apiGroup: [],\n      tableShow: {\n        currentPage: 1,\n        pageSize: 10,\n        listCount: 0\n      },\n      searchConf: {\n        type: '',\n        keywords: '',\n        status: ''\n      },\n      modalSetting: {\n        show: false,\n        loading: false,\n        index: 0\n      },\n      formItem: {\n        api_class: '',\n        info: '',\n        group_hash: 'default',\n        method: 2,\n        hash_type: 2,\n        hash: '',\n        access_token: 0,\n        is_test: 0,\n        id: 0\n      },\n      ruleValidate: {\n        api_class: [\n          { required: true, message: '真实类库不能为空', trigger: 'blur' }\n        ],\n        info: [\n          { required: true, message: '接口名称不能为空', trigger: 'blur' }\n        ]\n      },\n      buttonShow: {\n        edit: true,\n        request: true,\n        response: true,\n        del: true,\n        changeStatus: true\n      },\n      listLoading: false\n    }\n  },\n  created () {\n    let vm = this\n    vm.getList()\n    vm.hasRule('InterfaceList/edit').then(res => {\n      vm.buttonShow.edit = res\n    })\n    vm.hasRule('InterfaceList/del').then(res => {\n      vm.buttonShow.del = res\n    })\n    vm.hasRule('InterfaceList/changeStatus').then(res => {\n      vm.buttonShow.changeStatus = res\n    })\n    vm.hasRule('Fields/response').then(res => {\n      vm.buttonShow.response = res\n    })\n    vm.hasRule('Fields/request').then(res => {\n      vm.buttonShow.request = res\n    })\n    getAll().then(response => {\n      vm.apiGroup = response.data.data.list\n    })\n  },\n  activated () {\n    let vm = this\n    getAll().then(response => {\n      vm.apiGroup = response.data.data.list\n    })\n  },\n  methods: {\n    alertAdd () {\n      let vm = this\n      getHash().then(response => {\n        vm.formItem.hash = response.data.data.hash\n      })\n      vm.modalSetting.show = true\n    },\n    submit () {\n      let vm = this\n      this.$refs['myForm'].validate((valid) => {\n        if (valid) {\n          vm.modalSetting.loading = true\n          if (vm.formItem.id === 0) {\n            add(vm.formItem).then(response => {\n              vm.modalSetting.loading = false\n              vm.$Message.success(response.data.msg)\n              vm.getList()\n              vm.cancel()\n            }).catch(() => {\n              vm.modalSetting.loading = false\n            })\n          } else {\n            edit(vm.formItem).then(response => {\n              vm.modalSetting.loading = false\n              vm.$Message.success(response.data.msg)\n              vm.getList()\n              vm.cancel()\n            }).catch(() => {\n              vm.modalSetting.loading = false\n            })\n          }\n        }\n      })\n    },\n    cancel () {\n      this.modalSetting.show = false\n    },\n    changePage (page) {\n      this.tableShow.currentPage = page\n      this.getList()\n    },\n    changeSize (size) {\n      this.tableShow.pageSize = size\n      this.getList()\n    },\n    search () {\n      this.tableShow.currentPage = 1\n      this.getList()\n    },\n    getList () {\n      let vm = this\n      vm.listLoading = true\n      getList({\n        page: vm.tableShow.currentPage,\n        size: vm.tableShow.pageSize,\n        type: vm.searchConf.type,\n        keywords: vm.searchConf.keywords,\n        status: vm.searchConf.status\n      }).then(response => {\n        vm.tableData = response.data.data.list\n        vm.tableShow.listCount = response.data.data.count\n        vm.listLoading = false\n      })\n    },\n    doCancel (data) {\n      if (!data) {\n        this.formItem.id = 0\n        this.$refs['myForm'].resetFields()\n        this.modalSetting.loading = false\n        this.modalSetting.index = 0\n      }\n    },\n    refreshRoute () {\n      let vm = this\n      vm.refreshLoading = true\n      refresh().then(response => {\n        vm.$Message.success(response.data.msg)\n        vm.confirmRefresh = false\n        vm.refreshLoading = false\n      }).catch(() => {\n        vm.confirmRefresh = false\n        vm.refreshLoading = false\n      })\n    }\n  }\n}\n",{"version":3,"sources":["list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"list.vue","sourceRoot":"src/view/interface","sourcesContent":["<style lang=\"less\" scoped>\n  @import './list.less';\n</style>\n<template>\n  <div>\n    <Row>\n      <Col span=\"24\">\n        <Card class=\"margin-bottom-10\">\n          <Form inline>\n            <FormItem class=\"margin-bottom-0\">\n              <Select v-model=\"searchConf.status\" clearable placeholder='请选择状态' style=\"width:120px\">\n                <Option :value=\"1\">启用</Option>\n                <Option :value=\"0\">禁用</Option>\n              </Select>\n            </FormItem>\n            <FormItem class=\"margin-bottom-0\">\n              <Select v-model=\"searchConf.type\" clearable placeholder=\"请选择类别\" style=\"width:120px\">\n                <Option :value=\"1\">接口标识</Option>\n                <Option :value=\"2\">接口名称</Option>\n                <Option :value=\"3\">真实类库</Option>\n              </Select>\n            </FormItem>\n            <FormItem class=\"margin-bottom-0\">\n              <Input v-model=\"searchConf.keywords\" placeholder=\"\"></Input>\n            </FormItem>\n            <FormItem class=\"margin-bottom-0\">\n              <Button type=\"primary\" @click=\"search\">{{ $t('find_button') }}/{{ $t('refresh_button') }}</Button>\n            </FormItem>\n          </Form>\n        </Card>\n      </Col>\n    </Row>\n    <Row>\n      <Col span=\"24\">\n        <Card>\n          <div class=\"margin-bottom-15\">\n            <Button type=\"primary\" v-has=\"'InterfaceList/add'\" @click=\"alertAdd\" icon=\"md-add\">{{ $t('add_button') }}</Button>\n            <Button type=\"warning\" v-has=\"'InterfaceList/refresh'\" class=\"margin-left-5\" @click=\"confirmRefresh = true\" icon=\"md-refresh\">刷新路由</Button>\n            <Button type=\"info\" class=\"margin-left-5\" to=\"/wiki/list\" icon=\"md-bookmarks\">接口文档</Button>\n          </div>\n          <div>\n            <Table :loading=\"listLoading\" :columns=\"columnsList\" :data=\"tableData\" border disabled-hover></Table>\n          </div>\n          <div class=\"margin-top-15\" style=\"text-align: center\">\n            <Page :total=\"tableShow.listCount\" :current=\"tableShow.currentPage\"\n                  :page-size=\"tableShow.pageSize\" @on-change=\"changePage\"\n                  @on-page-size-change=\"changeSize\" show-elevator show-sizer show-total></Page>\n          </div>\n        </Card>\n      </Col>\n    </Row>\n    <Modal v-model=\"modalSetting.show\" width=\"668\" :styles=\"{top: '30px'}\" @on-visible-change=\"doCancel\">\n      <p slot=\"header\" style=\"color:#2d8cf0\">\n        <Icon type=\"md-alert\"></Icon>\n        <span>{{formItem.id ? '编辑' : '新增'}}接口</span>\n      </p>\n      <Form ref=\"myForm\" :rules=\"ruleValidate\" :model=\"formItem\" :label-width=\"90\">\n        <FormItem label=\"接口名称\" prop=\"info\">\n          <Input v-model=\"formItem.info\" placeholder=\"请输入接口名称\"></Input>\n        </FormItem>\n        <FormItem label=\"真实类库\" prop=\"api_class\">\n          <Input v-model=\"formItem.api_class\" placeholder=\"请输入真实类库\"></Input>\n        </FormItem>\n        <FormItem label=\"接口分组\" prop=\"group_hash\">\n          <Select v-model=\"formItem.group_hash\" style=\"width:200px\">\n            <Option v-for=\"(v, i) in apiGroup\" :value=\"v.hash\" :kk=\"i\" :key=\"v.hash\"> {{v.name}}</Option>\n          </Select>\n        </FormItem>\n        <FormItem label=\"请求方式\" prop=\"method\">\n          <Select v-model=\"formItem.method\" style=\"width:200px\">\n            <Option :value=\"0\" :key=\"0\"> 不限</Option>\n            <Option :value=\"1\" :key=\"1\"> POST</Option>\n            <Option :value=\"2\" :key=\"2\"> GET</Option>\n          </Select>\n        </FormItem>\n        <FormItem label=\"接口映射\" prop=\"hash\">\n          <Input style=\"width: 300px\" disabled v-model=\"formItem.hash\"></Input>\n          <Tag color=\"error\" class=\"margin-left-5\">系统自动生成，不允许修改</Tag>\n        </FormItem>\n        <FormItem label=\"AccessToken\" prop=\"access_token\">\n          <Select v-model=\"formItem.access_token\" style=\"width:200px\">\n            <Option :value=\"0\" :key=\"0\"> 简易认证</Option>\n            <Option :value=\"1\" :key=\"1\"> 复杂认证</Option>\n          </Select>\n          <Tooltip placement=\"right\" max-width=\"800\">\n            <Icon type=\"md-help-circle\" class=\"margin-left-5\" color=\"#2d8cf0\" size=\"20\"/>\n            <div slot=\"content\">\n              <p>新版本的全部接口都必须在Header中传递access-token字段，所以AccessToken必须要验证。</p>\n              <p>简易认证：在请求这类接口时候，请直接在header中传递AppSecret即可，终身有效。</p>\n              <p>复杂认证：在请求这类接口时候，先请求getAccessToken接口获取可用的AccessToken，记住这里的AccessToken默认只有2小时的有效期。</p>\n            </div>\n          </Tooltip>\n        </FormItem>\n        <FormItem label=\"路由模式\" prop=\"hash_type\">\n          <Select v-model=\"formItem.hash_type\" style=\"width:200px\">\n            <Option :value=\"1\" :key=\"1\"> 普通模式</Option>\n            <Option :value=\"2\" :key=\"2\"> 加密模式</Option>\n          </Select>\n          <Tooltip placement=\"right\" max-width=\"800\">\n            <Icon type=\"md-help-circle\" class=\"margin-left-5\" color=\"#2d8cf0\" size=\"20\"/>\n            <div slot=\"content\">\n              <p>普通模式：接口将不采用hash映射，会直接使用真实类库来请求。</p>\n              <p>加密模式：接口将采用hash映射，以达到隐藏真实类库的目的。</p>\n            </div>\n          </Tooltip>\n        </FormItem>\n        <FormItem label=\"测试模式\" prop=\"is_test\">\n          <Select v-model=\"formItem.is_test\" style=\"width:200px\">\n            <Option :value=\"0\" :key=\"0\"> 生产模式</Option>\n            <Option :value=\"1\" :key=\"1\"> 测试模式</Option>\n          </Select>\n        </FormItem>\n      </Form>\n      <div slot=\"footer\">\n        <Button type=\"text\" @click=\"cancel\" class=\"margin-right-10\">取消</Button>\n        <Button type=\"primary\" @click=\"submit\" :loading=\"modalSetting.loading\">确定</Button>\n      </div>\n    </Modal>\n    <Modal v-model=\"confirmRefresh\" width=\"360\">\n      <p slot=\"header\" style=\"color:#f60;text-align:center\">\n        <Icon type=\"information-circled\"></Icon>\n        <span>确定要刷新路由么</span>\n      </p>\n      <div style=\"text-align:center\">\n        <p>刷新路由是一个非常危险的操作，它有可能影响到您现有接口的访问，请确认无误后刷新！！</p>\n      </div>\n      <div slot=\"footer\">\n        <Button type=\"error\" size=\"large\" long  :loading=\"refreshLoading\" @click=\"refreshRoute\">确定刷新</Button>\n      </div>\n    </Modal>\n  </div>\n</template>\n<script>\nimport { getList, changeStatus, add, edit, del, getHash, refresh } from '@/api/interface'\nimport { getAll } from '@/api/interface-group'\n\nconst editButton = (vm, h, currentRow, index) => {\n  if (vm.buttonShow.edit) {\n    return h('Button', {\n      props: {\n        type: 'primary'\n      },\n      style: {\n        margin: '0 5px'\n      },\n      on: {\n        'click': () => {\n          vm.formItem.id = currentRow.id\n          vm.formItem.api_class = currentRow.api_class\n          vm.formItem.info = currentRow.info\n          vm.formItem.method = currentRow.method\n          vm.formItem.hash = currentRow.hash\n          vm.formItem.group_hash = currentRow.group_hash\n          vm.formItem.access_token = currentRow.access_token\n          vm.formItem.is_test = currentRow.is_test\n          vm.formItem.hash_type = currentRow.hash_type\n          vm.modalSetting.show = true\n          vm.modalSetting.index = index\n        }\n      }\n    }, vm.$t('edit_button'))\n  }\n}\nconst deleteButton = (vm, h, currentRow, index) => {\n  if (vm.buttonShow.del) {\n    return h('Poptip', {\n      props: {\n        confirm: true,\n        title: '您确定要删除这条数据吗? ',\n        transfer: true\n      },\n      on: {\n        'on-ok': () => {\n          del(currentRow.hash).then(response => {\n            currentRow.loading = false\n            vm.tableData.splice(index, 1)\n            vm.$Message.success(response.data.msg)\n          })\n        }\n      }\n    }, [\n      h('Button', {\n        style: {\n          margin: '0 5px'\n        },\n        props: {\n          type: 'error',\n          placement: 'top',\n          loading: currentRow.isDeleting\n        }\n      }, vm.$t('delete_button'))\n    ])\n  }\n}\nconst requestButton = (vm, h, currentRow, index) => {\n  if (vm.buttonShow.request) {\n    return h('Button', {\n      style: {\n        margin: '0 5px'\n      },\n      props: {\n        type: 'info',\n        placement: 'top',\n        loading: currentRow.isDeleting\n      },\n      on: {\n        click: () => {\n          let hash = currentRow.hash\n          vm.$router.push({\n            path: `request/${hash}`\n          })\n        }\n      }\n    }, '请求参数')\n  }\n}\nconst responseButton = (vm, h, currentRow, index) => {\n  if (vm.buttonShow.response) {\n    return h('Button', {\n      style: {\n        margin: '0 5px'\n      },\n      props: {\n        type: 'warning',\n        placement: 'top',\n        loading: currentRow.isDeleting\n      },\n      on: {\n        click: () => {\n          let hash = currentRow.hash\n          vm.$router.push({\n            path: `response/${hash}`\n          })\n        }\n      }\n    }, '返回参数')\n  }\n}\n\nexport default {\n  name: 'interface_list',\n  data () {\n    return {\n      confirmRefresh: false,\n      refreshLoading: false,\n      columnsList: [\n        {\n          title: '序号',\n          type: 'index',\n          width: 65,\n          align: 'center'\n        },\n        {\n          title: '接口名称',\n          align: 'center',\n          minWidth: 190,\n          key: 'info'\n        },\n        {\n          title: '真实类库',\n          align: 'center',\n          key: 'api_class',\n          width: 190\n        },\n        {\n          title: '接口映射',\n          align: 'center',\n          key: 'hash',\n          width: 140\n        },\n        {\n          title: '请求方式',\n          align: 'center',\n          width: 95,\n          render: (h, params) => {\n            if (params.row.isTest === 1) {\n              return h('tag', {\n                attrs: {\n                  color: 'error'\n                }\n              }, '测试')\n            } else {\n              switch (params.row.method) {\n                case 1:\n                  return h('Tag', {\n                    attrs: {\n                      color: 'success'\n                    }\n                  }, 'POST')\n                case 2:\n                  return h('Tag', {\n                    attrs: {\n                      color: 'primary'\n                    }\n                  }, 'GET')\n                case 0:\n                  return h('Tag', {\n                    attrs: {\n                      color: 'warning'\n                    }\n                  }, '不限')\n              }\n            }\n          }\n        },\n        {\n          title: '接口状态',\n          align: 'center',\n          width: 130,\n          render: (h, params) => {\n            let vm = this\n            return h('i-switch', {\n              attrs: {\n                size: 'large'\n              },\n              props: {\n                'true-value': 1,\n                'false-value': 0,\n                value: params.row.status,\n                disabled: !vm.buttonShow.changeStatus\n              },\n              on: {\n                'on-change': function (status) {\n                  changeStatus(status, params.row.hash).then(response => {\n                    vm.$Message.success(response.data.msg)\n                    vm.getList()\n                  })\n                }\n              }\n            }, [\n              h('span', {\n                slot: 'open'\n              }, vm.$t('open_choose')),\n              h('span', {\n                slot: 'close'\n              }, vm.$t('close_choose'))\n            ])\n          }\n        },\n        {\n          title: '操作',\n          align: 'center',\n          minWidth: 375,\n          render: (h, params) => {\n            return h('div', [\n              editButton(this, h, params.row, params.index),\n              requestButton(this, h, params.row, params.index),\n              responseButton(this, h, params.row, params.index),\n              deleteButton(this, h, params.row, params.index)\n            ])\n          }\n        }\n      ],\n      tableData: [],\n      apiGroup: [],\n      tableShow: {\n        currentPage: 1,\n        pageSize: 10,\n        listCount: 0\n      },\n      searchConf: {\n        type: '',\n        keywords: '',\n        status: ''\n      },\n      modalSetting: {\n        show: false,\n        loading: false,\n        index: 0\n      },\n      formItem: {\n        api_class: '',\n        info: '',\n        group_hash: 'default',\n        method: 2,\n        hash_type: 2,\n        hash: '',\n        access_token: 0,\n        is_test: 0,\n        id: 0\n      },\n      ruleValidate: {\n        api_class: [\n          { required: true, message: '真实类库不能为空', trigger: 'blur' }\n        ],\n        info: [\n          { required: true, message: '接口名称不能为空', trigger: 'blur' }\n        ]\n      },\n      buttonShow: {\n        edit: true,\n        request: true,\n        response: true,\n        del: true,\n        changeStatus: true\n      },\n      listLoading: false\n    }\n  },\n  created () {\n    let vm = this\n    vm.getList()\n    vm.hasRule('InterfaceList/edit').then(res => {\n      vm.buttonShow.edit = res\n    })\n    vm.hasRule('InterfaceList/del').then(res => {\n      vm.buttonShow.del = res\n    })\n    vm.hasRule('InterfaceList/changeStatus').then(res => {\n      vm.buttonShow.changeStatus = res\n    })\n    vm.hasRule('Fields/response').then(res => {\n      vm.buttonShow.response = res\n    })\n    vm.hasRule('Fields/request').then(res => {\n      vm.buttonShow.request = res\n    })\n    getAll().then(response => {\n      vm.apiGroup = response.data.data.list\n    })\n  },\n  activated () {\n    let vm = this\n    getAll().then(response => {\n      vm.apiGroup = response.data.data.list\n    })\n  },\n  methods: {\n    alertAdd () {\n      let vm = this\n      getHash().then(response => {\n        vm.formItem.hash = response.data.data.hash\n      })\n      vm.modalSetting.show = true\n    },\n    submit () {\n      let vm = this\n      this.$refs['myForm'].validate((valid) => {\n        if (valid) {\n          vm.modalSetting.loading = true\n          if (vm.formItem.id === 0) {\n            add(vm.formItem).then(response => {\n              vm.modalSetting.loading = false\n              vm.$Message.success(response.data.msg)\n              vm.getList()\n              vm.cancel()\n            }).catch(() => {\n              vm.modalSetting.loading = false\n            })\n          } else {\n            edit(vm.formItem).then(response => {\n              vm.modalSetting.loading = false\n              vm.$Message.success(response.data.msg)\n              vm.getList()\n              vm.cancel()\n            }).catch(() => {\n              vm.modalSetting.loading = false\n            })\n          }\n        }\n      })\n    },\n    cancel () {\n      this.modalSetting.show = false\n    },\n    changePage (page) {\n      this.tableShow.currentPage = page\n      this.getList()\n    },\n    changeSize (size) {\n      this.tableShow.pageSize = size\n      this.getList()\n    },\n    search () {\n      this.tableShow.currentPage = 1\n      this.getList()\n    },\n    getList () {\n      let vm = this\n      vm.listLoading = true\n      getList({\n        page: vm.tableShow.currentPage,\n        size: vm.tableShow.pageSize,\n        type: vm.searchConf.type,\n        keywords: vm.searchConf.keywords,\n        status: vm.searchConf.status\n      }).then(response => {\n        vm.tableData = response.data.data.list\n        vm.tableShow.listCount = response.data.data.count\n        vm.listLoading = false\n      })\n    },\n    doCancel (data) {\n      if (!data) {\n        this.formItem.id = 0\n        this.$refs['myForm'].resetFields()\n        this.modalSetting.loading = false\n        this.modalSetting.index = 0\n      }\n    },\n    refreshRoute () {\n      let vm = this\n      vm.refreshLoading = true\n      refresh().then(response => {\n        vm.$Message.success(response.data.msg)\n        vm.confirmRefresh = false\n        vm.refreshLoading = false\n      }).catch(() => {\n        vm.confirmRefresh = false\n        vm.refreshLoading = false\n      })\n    }\n  }\n}\n</script>\n"]}]}